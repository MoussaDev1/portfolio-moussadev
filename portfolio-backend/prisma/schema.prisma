// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Projets (Zone System vs Floor System)
model Project {
  id          String        @id @default(cuid())
  slug        String        @unique
  title       String
  description String
  fullDescription String?
  type        ProjectType   @default(ZONE_SYSTEM) // ZONE_SYSTEM | FLOOR_SYSTEM
  status      ProjectStatus @default(PLANNING)    // PLANNING | ACTIVE | COMPLETED | PAUSED
  featured    Boolean       @default(false)
  category    String?
  
  // Images et liens
  thumbnailUrl String?
  demoUrl      String?
  githubUrl    String?
  caseStudyUrl String?
  
  // Métadonnées
  highlights   String? // JSON stringified array
  challenges   String?
  learnings    String?
  duration     String?
  teamSize     Int?
  
  // Relations
  zones         Zone[]
  floors        Floor[]
  technologies  ProjectTechnology[]
  posts         ProjectPost[]
  pomodoroSessions PomodoroSession[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dateCompleted DateTime?
  
  @@map("projects")
}

// Zones (pour Zone System)
model Zone {
  id          String   @id @default(cuid())
  name        String
  description String?
  order       Int
  status      ZoneStatus @default(TODO) // TODO | IN_PROGRESS | COMPLETED
  
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  quests      Quest[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("zones")
}

// Floors (pour Floor System)
model Floor {
  id          String   @id @default(cuid())
  name        String
  description String?
  order       Int
  status      FloorStatus @default(TODO) // TODO | IN_PROGRESS | COMPLETED
  
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  floorQuests FloorQuest[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("floors")
}

// Quêtes (pour Zones)
model Quest {
  id               String      @id @default(cuid())
  title            String
  userStory        String
  definitionOfDone String? // JSON stringified array
  manualTests      String? // JSON stringified array
  techDebt         String?
  status           QuestStatus @default(TODO) // TODO | IN_PROGRESS | TESTING | DONE
  priority         Priority    @default(MEDIUM) // LOW | MEDIUM | HIGH | CRITICAL
  estimatedHours   Int?
  actualHours      Int?
  
  zoneId      String
  zone        Zone     @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?
  
  @@map("quests")
}

// Floor Quêtes (pour Floors)
model FloorQuest {
  id               String      @id @default(cuid())
  title            String
  userStory        String
  definitionOfDone String? // JSON stringified array
  manualTests      String? // JSON stringified array
  techDebt         String?
  status           QuestStatus @default(TODO)
  priority         Priority    @default(MEDIUM)
  estimatedHours   Int?
  actualHours      Int?
  
  floorId     String
  floor       Floor    @relation(fields: [floorId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?
  
  @@map("floor_quests")
}

// Technologies (Tech Radar)
model Technology {
  id          String       @id @default(cuid())
  name        String       @unique
  slug        String       @unique
  category    TechCategory // LANGUAGES | FRAMEWORKS | TOOLS | PLATFORMS
  status      TechStatus   // MASTERED | LEARNING | TO_REVIEW | EXPLORING
  description String?
  iconUrl     String?
  websiteUrl  String?
  
  // Relations
  projects    ProjectTechnology[]
  posts       PostTechnology[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("technologies")
}

// Blog Posts
model Post {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  content     String   // Markdown
  excerpt     String?
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  thumbnailUrl String?
  readTime    Int?     // en minutes
  views       Int      @default(0)
  
  // Relations
  projects     ProjectPost[]
  technologies PostTechnology[]
  categories   PostCategory[]
  tags         PostTag[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?
  
  @@map("posts")
}

// Catégories de blog
model Category {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String?
  color       String? // Couleur hex
  
  posts       PostCategory[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("categories")
}

// Tags de blog
model Tag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  color String? // Couleur hex
  
  posts PostTag[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("tags")
}

// Sessions Pomodoro
model PomodoroSession {
  id          String      @id @default(cuid())
  duration    Int         // en minutes
  type        SessionType // WORK | SHORT_BREAK | LONG_BREAK
  completed   Boolean     @default(false)
  notes       String?
  
  projectId   String?
  project     Project?    @relation(fields: [projectId], references: [id])
  
  createdAt   DateTime @default(now())
  completedAt DateTime?
  
  @@map("pomodoro_sessions")
}

// Tables de liaison
model ProjectTechnology {
  projectId    String
  technologyId String
  
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  technology   Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
  
  @@id([projectId, technologyId])
  @@map("project_technologies")
}

model ProjectPost {
  projectId String
  postId    String
  
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@id([projectId, postId])
  @@map("project_posts")
}

model PostTechnology {
  postId       String
  technologyId String
  
  post         Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  technology   Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
  
  @@id([postId, technologyId])
  @@map("post_technologies")
}

model PostCategory {
  postId     String
  categoryId String
  
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime @default(now())
  
  @@id([postId, categoryId])
  @@map("post_categories")
}

model PostTag {
  postId String
  tagId  String
  
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@id([postId, tagId])
  @@map("post_tags")
}

// Enums
enum ProjectType {
  ZONE_SYSTEM
  FLOOR_SYSTEM
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  COMPLETED
  PAUSED
  ARCHIVED
}

enum ZoneStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

enum FloorStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

enum QuestStatus {
  TODO
  IN_PROGRESS
  TESTING
  DONE
  BLOCKED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TechCategory {
  LANGUAGES
  FRAMEWORKS
  LIBRARIES
  TOOLS
  PLATFORMS
  DATABASES
  DEVOPS
}

enum TechStatus {
  MASTERED
  LEARNING
  TO_REVIEW
  EXPLORING
  DEPRECATED
}

enum SessionType {
  WORK
  SHORT_BREAK
  LONG_BREAK
}
